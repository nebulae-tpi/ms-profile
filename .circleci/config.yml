
version: 2
jobs:
  # register-microservice:
  prepare:
    working_directory: ~/nebulae/
    docker:
      - image: circleci/node:9.9.0
        command: bash
        user: circleci
    steps:
      - checkout:
          path: ~/nebulae/repo
      - persist_to_workspace:
          root: ~/nebulae
          paths:
            - repo
      # - run:
      #     name: Installing NebulaE-cli & Registering Micro-FrontEnd
      #     command: |
      #       echo $GCP_SERVICE_ACCOUNT_PROD | base64 --decode --ignore-garbage > /tmp/gcloud-service-key.json
      #       npm config set prefix '~/.npm-global'
      #       export PATH=~/.npm-global/bin:$PATH
      #       source ~/.profile
      #       npm install -g nebulae
      #       nebulae register microfrontend --microservice-id=profile --frontend-id=emi --setup-file=/tmp/repo/etc/mfe-setup.json --store-type=GCP_DATASTORE --gcp-service-account-token=/tmp/gcloud-service-key.json            
 
 ################## FRONT END ################


  build-frontend:    
    working_directory: ~/nebulae/
    docker:
      - image: circleci/node:9.9.0
        command: bash
    steps:
      - attach_workspace:
          at: ~/nebulae
      - run:
          name: Register Micr-FrontEnd + Compose UI
          command: |
            source ~/nebulae/repo/.circleci/scripts/gitChanged.sh
            cd ~/nebulae/repo/
            gitChanged frontend || echo $GCP_SERVICE_ACCOUNT_PROD | base64 --decode --ignore-garbage > /tmp/gcloud-service-key.json
            gitChanged frontend || npm config set prefix '~/.npm-global'
            gitChanged frontend || export PATH=~/.npm-global/bin:$PATH
            gitChanged frontend || source ~/.profile
            gitChanged frontend || npm install -g @nebulae/cli # before npm install -g nebulae
            gitChanged frontend || npm install -g @angular/cli
            gitChanged frontend || nebulae register microfrontend --microservice-id=profile --frontend-id=emi --setup-file=/home/circleci/nebulae/repo/etc/mfe-setup.json --store-type=GCP_DATASTORE --gcp-service-account-token=/tmp/gcloud-service-key.json
            gitChanged frontend || nebulae compose-ui production --shell-type=FUSE2_ANGULAR --shell-repo=https://github.com/nebulae-tpm/emi.git --frontend-id=emi --output-dir=/home/circleci/nebulae/frontend/emi/ --store-type=GCP_DATASTORE --gcp-service-account-token=/tmp/gcloud-service-key.json
            gitChanged frontend || ls /home/circleci/nebulae/frontend/emi/
      # - run:
      #     name: Installing NebulaE cli & Compose FrontEnd
      #     command: |
      #       echo $GCP_SERVICE_ACCOUNT_PROD | base64 --decode --ignore-garbage > /tmp/gcloud-service-key.json
      #       npm config set prefix '~/.npm-global'
      #       export PATH=~/.npm-global/bin:$PATH
      #       source ~/.profile
      #       npm install -g nebulae
      #       npm install -g @angular/cli
      #       nebulae compose-ui production --shell-type=FUSE2_ANGULAR --shell-repo=https://github.com/nebulae-tpm/emi.git --frontend-id=emi --output-dir=/tmp/nebulae/emi/ --store-type=GCP_DATASTORE --gcp-service-account-token=/tmp/gcloud-service-key.json      
      #       ls /tmp/nebulae/emi/dist
      - run:
          name: Download SHELL Repository
          command: |
            source ~/nebulae/repo/.circleci/scripts/gitChanged.sh
            cd ~/nebulae/repo/
            mkdir -p ~/nebulae/frontend/shell 
            gitChanged frontend || ( git clone --depth=1 https://github.com/nebulae-tpm/emi ~/nebulae/frontend/shell ) 
      - run:
          name: commit & push package-lock.json changes
          command: |
            source ~/nebulae/repo/.circleci/scripts/gitChanged.sh
            cd ~/nebulae/repo/
            gitChanged frontend || cp /home/circleci/nebulae/frontend/emi/package-lock.json ~/nebulae/frontend/shell/frontend/emi/package-lock.json
            gitChanged frontend || ( cd ~/nebulae/frontend/shell && gitPublishPackageLockChanges "$GITHUB_USER_EMAIL" "$GITHUB_USER_NAME" "$GITHUB_PERSONAL_ACCESS_TOKEN" "nebulae-tpm/emi" "master" && cd ~/nebulae/repo/)
      - setup_remote_docker
      - run:
          name: Build docker image and push it to hub
          command: |
            source ~/nebulae/repo/.circleci/scripts/gitChanged.sh
            cd ~/nebulae/repo/
            gitChanged frontend || ls ~/nebulae/frontend/emi/dist/
            gitChanged frontend || export DOCKERHUB_IMAGE=emi
            gitChanged frontend || export FRONTEND_SHELL_PATH=~/nebulae/frontend/emi
            gitChanged frontend || ( cd ~/nebulae/frontend/shell && sh deployment/docker/build-docker-hub.sh && cd ~/nebulae/repo/ )
            gitChanged frontend || echo $DOCKERHUB_NAMESPACE/$DOCKERHUB_IMAGE@$(docker pull $DOCKERHUB_NAMESPACE/$DOCKERHUB_IMAGE:latest | grep sha256 | cut -c 9-) > ~/nebulae/frontend/DOCKERHUB_GENERATED_IMAGE_DIGEST

      # Persist the specified paths (workspace/echo-output) into the workspace for use in downstream job. 
      - persist_to_workspace:
          # Must be an absolute path, or relative path from working_directory. This is a directory on the container which is 
          # taken to be the root directory of the workspace.
          root: ~/nebulae/
          # Must be relative path from root
          paths:
            - frontend  
  # build-docker:
  #   working_directory: /tmp
  #   docker:
  #     - image: docker:17.05.0-ce-git
  #   steps:    
  #     - setup_remote_docker  
  #     - attach_workspace:
  #         at: /tmp
  #     - run:
  #         name:  push docker-hub
  #         command: |      
  #           ls /tmp/dist/ 
  #           cd /tmp/
  #           git clone https://github.com/nebulae-tpm/emi
  #           export DOCKERHUB_NAMESPACE=$DOCKERHUB_NAMESPACE
  #           export DOCKERHUB_USER=$DOCKERHUB_USER
  #           export DOCKERHUB_IMAGE=emi
  #           export DOCKERHUB_PASS=$DOCKERHUB_PASS
  #           export FRONTEND_SHELL_PATH=/tmp/
  #           cd /tmp/emi
  #           sh /tmp/emi/deployment/docker/build-docker-hub.sh
  #           echo $DOCKERHUB_NAMESPACE/$DOCKERHUB_IMAGE@$(docker pull $DOCKERHUB_NAMESPACE/$DOCKERHUB_IMAGE:latest | grep sha256 | cut -c 9-) > /tmp/DOCKERHUB_GENERATED_IMAGE_DIGEST
  #     - persist_to_workspace:
  #         root: /tmp
  #         paths:
  #           - DOCKERHUB_GENERATED_IMAGE_DIGEST

  ################# API ################
  build-api:    
    working_directory: ~/nebulae/
    docker:
      - image: circleci/node:9.9.0
        command: bash
    steps:
      - attach_workspace:
          at: ~/nebulae
      - run:
          name: Installing NebulaE cli & Compose API
          command: |    
            source ~/nebulae/repo/.circleci/scripts/gitChanged.sh
            cd ~/nebulae/repo/            
            gitChanged api || echo $GCP_SERVICE_ACCOUNT_PROD | base64 --decode --ignore-garbage > /tmp/gcloud-service-key.json
            gitChanged api || npm config set prefix '~/.npm-global'
            gitChanged api || export PATH=~/.npm-global/bin:$PATH
            gitChanged api || source ~/.profile
            gitChanged api || npm install -g @nebulae/cli
            gitChanged api || nebulae register microapi --microservice-id=profile --api-id=gateway --setup-file=/home/circleci/nebulae/repo/etc/mapi-setup.json --store-type=GCP_DATASTORE --gcp-service-account-token=/tmp/gcloud-service-key.json            
            gitChanged api || nebulae compose-api production --api-type=NEBULAE_GATEWAY --api-repo=https://github.com/nebulae-tpm/gateway.git --api-id=gateway --output-dir=/home/circleci/nebulae/api/gateway/ --store-type=GCP_DATASTORE --gcp-service-account-token=/tmp/gcloud-service-key.json      
            gitChanged api || ls /home/circleci/nebulae/api/gateway/
      - setup_remote_docker
      - run:
          name: Build docker image and push it to hub
          command: | 
            source ~/nebulae/repo/.circleci/scripts/gitChanged.sh
            cd ~/nebulae/repo/
            mkdir -p ~/nebulae/api
            gitChanged api || ( cd  ~/nebulae/api/ && git clone --depth=1 https://github.com/nebulae-tpm/gateway  ~/nebulae/api/shell )      
            gitChanged api || ls ~/nebulae/api/shell
            gitChanged api || export DOCKERHUB_IMAGE=gateway
            gitChanged api || export API_SHELL_PATH=/home/circleci/nebulae/api/
            gitChanged api || ( cd ~/nebulae/api/shell && sh ~/nebulae/api/shell/deployment/docker/build-docker-hub.sh  && cd ~/nebulae/repo/ )
            gitChanged api || echo $DOCKERHUB_NAMESPACE/$DOCKERHUB_IMAGE@$(docker pull $DOCKERHUB_NAMESPACE/$DOCKERHUB_IMAGE:latest | grep sha256 | cut -c 9-) > ~/nebulae/api/DOCKERHUB_GENERATED_IMAGE_DIGEST
      - persist_to_workspace:
          root: ~/nebulae/
          paths:
            - api 
################# MBINIT ################ 

  build-mbinit:    
    working_directory: ~/nebulae/
    docker:
      - image: golang:1.9-alpine
        command: sh
    steps:
      - attach_workspace:
          at: ~/nebulae
      - run:
          name: Build mbinit
          command: |
            mkdir ~/nebulae/go
            apk add --no-cache git
            go get github.com/dumacp/mbinit
            go install github.com/dumacp/mbinit
            cp /go/bin/mbinit ~/nebulae/go/
      - persist_to_workspace:
          root: ~/nebulae/
          paths:
            - go

################# BACK END ################ 
            
  build-backend:    
    working_directory: ~/nebulae/
    docker:
      - image: circleci/node:9.9.0
        command: bash
    steps:
      - attach_workspace:
          at: ~/nebulae
      - setup_remote_docker      
      - run:
          name: Build docker image for profile
          command: |
            source ~/nebulae/repo/.circleci/scripts/gitChanged.sh
            cd ~/nebulae/repo/
            mkdir ~/nebulae/backend
            # unmcomment the following line when backend exist
            # cp ~/nebulae/go/mbinit ~/nebulae/repo/backend/profile/
            export DOCKERHUB_IMAGE=profile.backend.profile
            export DOCKERHUB_TAG=0.0.1
            gitChanged backend/profile || docker build  -t $DOCKERHUB_NAMESPACE/$DOCKERHUB_IMAGE:$DOCKERHUB_TAG -t $DOCKERHUB_NAMESPACE/$DOCKERHUB_IMAGE:latest ~/nebulae/repo/backend/profile/
            gitChanged backend/profile || docker login -u $DOCKERHUB_USER -p $DOCKERHUB_PASS
            gitChanged backend/profile || docker push $DOCKERHUB_NAMESPACE/$DOCKERHUB_IMAGE:$DOCKERHUB_TAG
            gitChanged backend/profile || docker push $DOCKERHUB_NAMESPACE/$DOCKERHUB_IMAGE:latest      
      - persist_to_workspace:
          root: ~/nebulae/
          paths:
            - backend            

################ DEPLOYMENT ################
  deploy-prod:
      working_directory: ~/nebulae/
      docker:
        - image: google/cloud-sdk:latest
      steps:
        - attach_workspace:
            at: ~/nebulae
        - run:
            name: Setup gcloud & kubectl
            command: |
              ls -a ~/nebulae
              echo $GCP_SERVICE_ACCOUNT_PROD | base64 --decode --ignore-garbage > /root/gcloud-service-key.json
              gcloud auth activate-service-account --key-file /root/gcloud-service-key.json
              gcloud --quiet config set project $GKE_PROJECT_PROD
              gcloud --quiet config set compute/zone $GKE_ZONE_PROD
              gcloud --quiet container clusters get-credentials $GKE_CLUSTER
              # cd /tmp/
              # git clone https://github.com/nebulae-tpm/emi
              # echo $GCP_SERVICE_ACCOUNT_PROD | base64 --decode --ignore-garbage > /root/gcloud-service-key.json
              # gcloud auth activate-service-account --key-file /root/gcloud-service-key.json            
              # gcloud --quiet config set project $GKE_PROJECT_PROD
              # gcloud --quiet config set compute/zone $GKE_ZONE_PROD
              # gcloud --quiet container clusters get-credentials $GKE_CLUSTER
        # - run:
        #     name: Deploy on Kubernetes
        #     command: |
        #       echo docker image DIGEST to set $(< /tmp/DOCKERHUB_GENERATED_IMAGE_DIGEST)
        #       kubectl set image deployment/frontend-emi frontend-emi=$(< /tmp/DOCKERHUB_GENERATED_IMAGE_DIGEST)
        - run:
            name: Deploy EMI FrontEnd
            command: |
              (ls ~/nebulae/frontend/DOCKERHUB_GENERATED_IMAGE_DIGEST && echo docker image DIGEST to set $(< ~/nebulae/frontend/DOCKERHUB_GENERATED_IMAGE_DIGEST) ) || echo frontend not found
              (ls ~/nebulae/frontend/DOCKERHUB_GENERATED_IMAGE_DIGEST && kubectl set image deployment/frontend-emi frontend-emi=$(< ~/nebulae/frontend/DOCKERHUB_GENERATED_IMAGE_DIGEST) ) || echo frontend not found
        - run: 
            name: Deploy GATEWAY API
            command: |
              (ls ~/nebulae/api/DOCKERHUB_GENERATED_IMAGE_DIGEST && echo docker image DIGEST to set $(< ~/nebulae/api/DOCKERHUB_GENERATED_IMAGE_DIGEST) ) || echo api not found
              (ls ~/nebulae/api/DOCKERHUB_GENERATED_IMAGE_DIGEST && kubectl set image deployment/api-gateway api-gateway=$(< ~/nebulae/api/DOCKERHUB_GENERATED_IMAGE_DIGEST) ) || echo api not found
        - run:
            name: Deploy BackEnds 
            command: |
                  kubectl apply -f ~/nebulae/repo/deployment/gke/ 
workflows:
  version: 2
  build-and-deploy:
    jobs:
      - prepare:
          context: TPM
      - build-frontend:
          context: TPM
          requires:
            - prepare
      - build-api:
          context: TPM
          requires:
            - prepare
      - build-mbinit:
          context: TPM
          requires:
            - prepare
      - build-backend:
          context: TPM
          requires:
            - prepare
            - build-mbinit
      - deploy-prod:
          context: TPM
          requires:
            - build-frontend
            - build-api
            - build-backend